#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('Some text');
const http = require('http');
const config = require('../config');

const port = normalizePort(process.env.PORT || config.serverPort);
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(value) {
  const parsedValue = parseInt(value, 10);

  if (Number.isNaN(parsedValue)) {
    return value;
  }

  if (parsedValue >= 0) {
    return parsedValue;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port  ${port}`;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default: throw error;
  }
}

function onListening() {
  const { address } = server;
  const bind = typeof address === 'string' ? `pipe ${address}` : `port ${address.port}`;
  debug(`Listening on ${bind}`);
}
